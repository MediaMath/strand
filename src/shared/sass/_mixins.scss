/**
 * @license
 * Copyright (c) 2015 MediaMath Inc. All rights reserved.
 * This code may only be used under the BSD style license found at http://mediamath.github.io/strand/LICENSE.txt

*/
@import "_bourbon";
// mixins.scss

@mixin buttonFont() {
	font-family: "Arimo", sans-serif;
	font-weight: 700;
	font-size: 13px!important;
	line-height: 29px !important;
	@include fontSmoothing();
}

// fix for google's fit behavior
@mixin fit() {
  :host([fitparent]) {
	@include fitContent();
  }
}

@mixin fitContent() {
	width: 100%;
}

@mixin invalid() {
	border-color: $color-C12;
}

// button selected state
@mixin buttonSelected($gradientColor1, $gradientColor2, $boxShadowColor) {
	background-image: linear-gradient($gradientColor1, $gradientColor2);
	box-shadow: inset 0 5px 1px $boxShadowColor;
}

// font smoothing
// defaults to antialiased
// Values: antialiased | auto | subpixel-antialiased
@mixin fontSmoothing($value: antialiased) {
	@if $value == antialiased {
		-webkit-font-smoothing: antialiased;
		-moz-osx-font-smoothing: grayscale;
		font-smoothing: antialiased;
	} @else if $value == auto {
		-webkit-font-smoothing: auto;
		-moz-osx-font-smoothing: auto;
		font-smoothing: auto;
	} @else if $value == subpixel-antialiased {
		-webkit-font-smoothing: subpixel-antialiased;
		-moz-osx-font-smoothing: auto;
		font-smoothing: subpixel-antialiased;
	}	
}

// Arrow Generator:
@function get-item($list, $current, $offset:0) {
	$result-position: ($current + $offset) % length($list);
	@if $result-position == 0 {
		$result-position: length($list);
	}
	@return nth($list, $result-position);
}
 
@mixin arrow($direction, $size, $color, $strokeColor) {
	&:before,
	&:after {
		position: absolute;
		width: 0;
		height: 0;
		content: " ";
		@if $direction == top or $direction == bottom {
			left: 50%;
			margin-left: -$size;
		} @else {
			top: 50%;
			margin-top: -$size;
		}
	}
	
	$directions: top, right, bottom, left;
	@for $i from 1 through length($directions) {
		@if nth($directions, $i) == $direction {
			&:before,
			&:after {
				border-#{get-item($directions, $i, -1)}: $size solid transparent; 
				border-#{get-item($directions, $i, 1)}: $size solid transparent; 
				// #{'border'}-#{get-item($directions, $i, -1)}-#{'style'}: solid;
				// #{'border'}-#{get-item($directions, $i, -1)}-#{'width'}: $size;
				// #{'border'}-#{get-item($directions, $i, -1)}-#{'color'}: transparent;
				// #{'border'}-#{get-item($directions, $i, 1)}-#{'style'}: solid;
				// #{'border'}-#{get-item($directions, $i, 1)}-#{'width'}: $size;
				// #{'border'}-#{get-item($directions, $i, 1)}-#{'color'}: transparent;
			}

			&:before {
				#{$direction}: 0px;
				border-#{get-item($directions, $i, 2)}: $size solid $strokeColor;
				// #{'border'}-#{get-item($directions, $i, 2)}-#{'style'}: solid;
				// #{'border'}-#{get-item($directions, $i, 2)}-#{'width'}: $size;
				// #{'border'}-#{get-item($directions, $i, 2)}-#{'color'}: $strokeColor;
			}

			&:after {
				#{$direction}: 1px;
				border-#{get-item($directions, $i, 2)}: $size solid $color;
				// #{'border'}-#{get-item($directions, $i, 2)}-#{'style'}: solid;
				// #{'border'}-#{get-item($directions, $i, 2)}-#{'width'}: $size;
				// #{'border'}-#{get-item($directions, $i, 2)}-#{'color'}: $color;
			}
		} 
	}
}

// bg color opacity
@mixin background-opacity($color, $opacity: 0.5) {
	background: rgba($color, $opacity);
}
