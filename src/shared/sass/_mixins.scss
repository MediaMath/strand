@import "_bourbon";
// mixins.scss

//fix for google's fit behavior
@mixin fit() {
  :host('[fitparent]') {
    @include fitContent();
  }
}

@mixin fitContent() {
	width: 100%;
}

// button selected state
@mixin buttonSelected($gradientColor1, $gradientColor2, $boxShadowColor) {
	@include background-image(linear-gradient($gradientColor1, $gradientColor2));
	box-shadow: inset 0 5px 1px $boxShadowColor;
}

// flexbox mixins
// set the flex display for parent container
// returns flex default if inline is not provided
@mixin displayFlex($inline:false) {
	@if $inline == true {
		display: -webkit-inline-box;  	// 2009 old webkit - safari
		display: -webkit-inline-flex;  	// 2012 old webkit - safari 
		display: -ms-inline-flexbox;   	// IE 10 
		display: inline-flex;     		// current spec 
	} @else {
		display: -webkit-box;     		// 2009 old webkit - safari 
		display: -webkit-flex;     		// 2012 old webkit - safari 
		display: -ms-flexbox;     		// IE 10 
		display: flex;            		// current spec 
	}	
}

// set flex vertical align for parent container
// returns center if alignment is not provided
// Values: start | center | end | baseline | stretch
@mixin flexVerticalAlign($alignment:center) {
	-webkit-box-align: $alignment;		// 2009 old webkit - safari 
	-webkit-flex-align: $alignment;		// 2012 old webkit - safari 
	-webkit-align-items: $alignment;
	-ms-flex-align: $alignment;			// IE 10 
	align-items: $alignment;			// current spec
}

// set flex horizontal align for parent container
// returns start if alignment is not provided
// Current Values: flex-start | flex-end | center | space-between | space-around
// Legacy Values: start | end | center | justify
@mixin flexJustify($alignment:flex-start) {
	$alignLegacy:start;
	$alignCurrent:flex-start;

	@if $alignment == end or $alignment == flex-end {
		$alignLegacy: end;
		$alignCurrent: flex-end;
	} @else if $alignment == start or $alignment == flex-start {
		$alignLegacy:start;
		$alignCurrent:flex-start;
	} @else if $alignment == space-between {
		$alignLegacy: justify;
		$alignCurrent: space-between;
	} @else if $alignment == space-around {
		$alignLegacy: justify;
		$alignCurrent: space-around;
	} @else {
		$alignLegacy: $alignment;
		$alignCurrent: $alignment;
	}

	-webkit-box-pack: $alignLegacy;			// 2009 old webkit - safari
	-webkit-flex-pack: $alignLegacy;		// 2012 old webkit - safari 
	-webkit-justify-content: $alignCurrent;
	-ms-flex-pack: $alignLegacy;			// IE 10 
	justify-content: $alignCurrent;			// current spec 
}

// set flex direction for the parent container
// Values: row | row-reverse | column | column-reverse
@mixin flexDirection($direction) {
	-webkit-box-direction: $direction;		// 2009 old webkit - safari
	-webkit-flex-direction: $direction; 	// 2012 old webkit - safari
	-ms-flex-direction: $direction;			// IE 10 
	flex-direction: $direction;				// current spec 

	@if $direction == column {
		-webkit-box-orient: vertical;		// apparantly safari needs this to respect column
	}
}

// set flex with arguements
// Values: multiple int or em  | 1 | 0 0 12em
@mixin flex($args:1) {
	-webkit-box-flex: $args;				// 2009 old webkit - safari
	-webkit-flex: $args;					// 2012 old webkit - safari
	-ms-flex: $args;						// IE 10 
	flex: $args;							// current spec 
}

// set align-self
// -ms- Values: auto | start | end | center | baseline | stretch
// Values: auto | flex-start | flex-end | center | baseline | stretch
@mixin alignSelf($alignment:flex-start) {
	$alignMS:start;
	$align:flex-start;

	@if $alignment == start or $alignment == flex-start {
		$alignMS: start;
		$align: flex-start;
	} @else if $alignment == end or $alignment == flex-end {
		$alignMS: end;
		$align: flex-end;
	} @else {
		$alignMS: $alignment;
		$align: $alignment;
	}

	-webkit-align-self: $align;
    -ms-flex-item-align: $alignMS;
    align-self: $align;
}

// font smoothing
// defaults to antialiased
// Values: antialiased | auto | subpixel-antialiased
@mixin fontSmoothing($value: antialiased) {
	@if $value == antialiased {
		-webkit-font-smoothing: antialiased;
		-moz-osx-font-smoothing: grayscale;
		font-smoothing: antialiased;
	} @else if $value == auto {
		-webkit-font-smoothing: auto;
		-moz-osx-font-smoothing: auto;
		font-smoothing: auto;
	} @else if $value == subpixel-antialiased {
		-webkit-font-smoothing: subpixel-antialiased;
		-moz-osx-font-smoothing: auto;
		font-smoothing: subpixel-antialiased;
	}	
}
